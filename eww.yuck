;; Variables
(defvar power_menu_open false)
(defvar battery_hover false)
(defvar volume_open false)
(defvar music_hover false)
(defvar wifi_open false)
(defvar brightness_open false)
;; Polls
(defpoll time :interval "1s" "date '+%H:%M'")
; (defpoll workspace_data :interval "1s" "hyprctl workspaces -j | jq -r '.[] | select(.id <= 5) | .id' | sort -n")
(defpoll active_workspace :interval "100ms" "hyprctl activeworkspace -j | grep -o '\"id\": [0-9]*' | grep -o '[0-9]*'")
(defpoll volume_level :interval "1s" "amixer get Master | grep -o '[0-9]*%' | head -1 | tr -d '%'")
(defpoll volume_muted :interval "1s" "amixer get Master | grep -o 'off' | wc -l")
(defpoll music_title :interval "2s" "playerctl metadata title 2>/dev/null || echo 'No Music'")
(defpoll music_artist :interval "2s" "playerctl metadata artist 2>/dev/null || echo ''")
(defpoll music_playing :interval "1s" "playerctl status 2>/dev/null || echo 'Stopped'")
(defpoll music_shuffle :interval "2s" "playerctl shuffle 2>/dev/null || echo 'Off'")
(defpoll music_loop :interval "2s" "playerctl loop 2>/dev/null || echo 'None'")
(defpoll current_power_profile :interval "5s" "powerprofilesctl get")
(defpoll brightness_level :interval "1s" "brightnessctl | grep -o '(.*)' | grep -o '[0-9]*'")
(defpoll warp_status :interval "2s" "warp-cli status | grep -q 'Connected' && echo 'connected' || echo 'disconnected'")

;; Widgets
(defwidget workspaces []
  (box :class "workspaces" :space-evenly false :spacing 5
    (for ws in "[1,2,3,4,5]"
      (button :class "${active_workspace == ws ? 'workspace-active' : 'workspace'}"
              :onclick "hyprctl dispatch workspace ${ws}"
        "${ws}"))))

(defwidget music []
  (box :class "music" :space-evenly false
    (eventbox :onhover "${EWW_CMD} update music_hover=true"
              :onhoverlost "${EWW_CMD} update music_hover=false"
      (box :space-evenly false
        (revealer :reveal music_hover :transition "slideleft"
          (box :class "music-controls" :spacing 5
            (button :class "${music_shuffle == 'On' ? 'active' : ''}"
                    :onclick "playerctl shuffle toggle" "üîÄ")
            (button :onclick "playerctl previous" "‚èÆ")))
        (button :onclick "playerctl play-pause"
        (label :text "${music_title}" :limit-width 25))
        (revealer :reveal music_hover :transition "slideright"
        (box :class "music-controls" :spacing 5
            (button :onclick "playerctl next" "‚è≠")
            (button :class "${music_loop != 'None' ? 'active' : ''}" 
              :onclick "if [ \"$(playerctl loop)\" = 'Playlist' ]; then playerctl loop None; else playerctl loop Playlist; fi" "üîÅ")))))))

; (defwidget wifi []
;   (box :class "wifi"
;     (eventbox :onhover "${EWW_CMD} update wifi_open=true"
;               :onhoverlost "${EWW_CMD} update wifi_open=false"
;       (box :space-evenly false
;         (revealer :reveal wifi_open :transition "slideleft"
;           (box :class "wifi-list" :orientation "v" :spacing 3
;             (for network in "${strsplit(wifi_list, '\n')}"
;               (button :onclick "nmcli dev wifi connect '${strsplit(network, ':')[0]}'"
;                 "${strsplit(network, ':')[0]} ${strsplit(network, ':')[2]}%"))))
;         (button :onclick ""
;           (label :text "üì∂ ${wifi_status != '' ? wifi_status : 'Disconnected'}"))))))

(defwidget volume []
  (box :class "volume" :space-evenly false
    (eventbox :onhover "${EWW_CMD} update volume_open=true"
              :onhoverlost "${EWW_CMD} update volume_open=false"
      (box :space-evenly false
        (revealer :reveal volume_open :transition "slideleft"
          (scale :class "volume-slider" :value volume_level :min 0 :max 100
                 :onchange "amixer set Master {}%"))
        (button :onclick "amixer set Master toggle"
          (label :text "${volume_muted == '2' ? 'Óª® ' : 'ÔÄ® '}"))))))
(defwidget brightness []
  (box :class "volume" :space-evenly false
    (eventbox :onhover "${EWW_CMD} update brightness_open=true"
              :onhoverlost "${EWW_CMD} update brightness_open=false"
      (box :space-evenly false
        (revealer :reveal brightness_open :transition "slideleft"
          (scale :class "volume-slider" :value brightness_level :min 0 :max 100
                 :onchange "brightnessctl set {}%"))
        (button 
          ; :onclick "amixer set Master toggle"
          (label :text "Û∞Éü "))))))
(defwidget battery []
  (box :class "battery"
    (eventbox :onhover "${EWW_CMD} update battery_hover=true"
              :onhoverlost "${EWW_CMD} update battery_hover=false"
      (box :space-evenly false
        (revealer :reveal battery_hover :transition "slideleft"
          (box :class "power-profiles" :orientation "h" :spacing 5
            (button :class "${current_power_profile == 'performance' ? 'active' : ''}"
                    :onclick "powerprofilesctl set performance"
              "Û∞à∏")
            (button :class "${current_power_profile == 'balanced' ? 'active' : ''}"
                    :onclick "powerprofilesctl set balanced"
              "Ôâé ")
            (button :class "${current_power_profile == 'power-saver' ? 'active' : ''}"
                    :onclick "powerprofilesctl set power-saver"
              "Û∞Çè")))
        (circular-progress :class "battery-circle"
                           :value {EWW_BATTERY["BAT0"].capacity}
                           :thickness 5
          ; (label :text "${EWW_BATTERY["BAT0"].capacity}%")
        (button 
          :class "iconbat"
          :limit-width 2
          :tooltip "battery ${EWW_BATTERY["BAT0"].status} on ${EWW_BATTERY["BAT0"].capacity}%"
          "Ó©±")
        )))))

(defwidget power_menu []
  (box :class "power-menu"
    (eventbox :onhover "${EWW_CMD} update power_menu_open=true"
              :onhoverlost "${EWW_CMD} update power_menu_open=false"
      (box :space-evenly false
        (revealer :reveal power_menu_open :transition "slideleft"
          (box :class "power-options" :spacing 5
            (button :onclick "systemctl suspend" "‚èæ")
            (button :onclick "systemctl reboot" "Ó´í")
            (button :onclick "systemctl poweroff" "‚èª ")))
        (button (label :text "Ôåì "))))))
(defwidget warp_toggle []
  (button :class "warp-btn ${warp_status}"
          :onclick "${warp_status == 'connected' ? 'warp-cli disconnect' : 'warp-cli connect'}"
          :tooltip "${warp_status == 'connected' ? 'Disconnect from Warp' : 'Connect to Warp'}"
    (label :text "${warp_status == 'connected' ? 'Û∞Ö† ' : 'Û∞Öü '}" :class "warp-icon"))
)

(defwidget clock []
  (box :class "clock"
    (label :text time)))
(defwidget systembar []
  (systray))
(defwidget bar []
  (eventbox :onhoverlost "${EWW_CMD} update power_menu_open=false
                          ${EWW_CMD} update battery_hover=false
                          ${EWW_CMD} update volume_open=false
                          ${EWW_CMD} update wifi_open=false
                          ${EWW_CMD} update music_hover=false
                          ${EWW_CMD} update brightness_open=false"
  (centerbox :class "bar"
    (box :class "left" :halign "start" :space-evenly false
      (workspaces))
    (box :class "center" :halign "center"
      (music))
    (box :class "right" :halign "end" :space-evenly false :spacing 10
      (warp_toggle)
      (volume)
      (brightness)
      (battery)
      (power_menu)
      (systembar)
      (clock)))))

;; Window
(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "24px"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  (bar))